#Использовать sql
#Использовать logos
#Использовать cmdline
#Использовать 1commands
#Использовать fs
#Использовать configor
#Использовать cpdb

Перем Лог;
Перем мПутьФайлНастроек;
Перем мНастройки;

Процедура Инициализация()

	Лог.Информация("Начинаем уменьшать размер КИС");

	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	Парсер.ДобавитьИменованныйПараметр("--FILE_ENV");
	Парсер.ДобавитьИменованныйПараметр("--DEBUG");

	Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
	мПутьФайлНастроек = Параметры["--FILE_ENV"];
	РежимОтладки = Параметры["--DEBUG"] = "true";
	
	УстановитьРежимОтладкиПриНеобходимости(РежимОтладки);

	Если мПутьФайлНастроек = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(мПутьФайлНастроек) Тогда
		Лог.Ошибка("Путь к файлам настроек не заполнен");
		Возврат;
	КонецЕсли;

	Лог.Отладка("Используем файл настроек: %1", мПутьФайлНастроек);

	ФайлНастроекСуществует = ПроверитьНаличиеФайла(мПутьФайлНастроек);

	Если ФайлНастроекСуществует = Ложь Тогда
		Лог.Ошибка("Файл %1 не существет или недоступен", мПутьФайлНастроек);
		Возврат;		
	КонецЕсли;

	Менеджер = ИнициироватьЧтениеНастроек(мПутьФайлНастроек);

	ЗаполнитьНастройкиПриложения(Менеджер);

	ВыполнитьШагиСкрипта();

	Лог.Информация("Уменьшение размера КИС завершено");

КонецПроцедуры

Процедура ВыполнитьШагиСкрипта()
	
	Если мНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Успех = Истина;

	// 1. Создать базу kis-shrink
	СоздатьБазу1С(Успех);

	// 2. Развернуть бекап .bak в базу kis-shrink
	ВостановитьSQlИзБекапа(Успех, мНастройки.СУБД_ПутьПолногоБекапа);

	// 3. Сделать обрезку таблиц sql
	ВыполнитьОбрезкуТаблицSQL(Успех);

	// 4. Сделать бекап .dt
	СоздатьБекап1С(Успех);

	// 5. Удалить базу kis-shrink на sql
	УдалитьБазуДанныхSQL(Успех);

	// 6. Создать базу kis-shrink на sql
	ВостановитьSQlИзБекапа(Успех, мНастройки.СУБД_ПутьПустогоБекапа);

	// 7. Сменить модель восстановления
	СменитьМодельВосстановленияБазыSQL(Успех);

	// 8. Загрузить бекап .dt в базу kis-shrink
	ЗагрузитьБекап1С(Успех);

	// 9. Обрезать возникшие логи
	ОбрезатьЛогиSQL(Успех);

	// 10. Сделать бекап .bak
	СоздатьSQlБекап(Успех);

КонецПроцедуры

Процедура СменитьМодельВосстановленияБазыSQL(Успех)
	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Меняю модель восстановления базы SQL");

	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = мНастройки.СУБД_Сервер;
	Соединение.ИмяБазы = "master";
	Соединение.ИмяПользователя = мНастройки.СУБД_Пользователь;
	Соединение.Пароль = мНастройки.СУБД_Пароль;
	
	Попытка
		Соединение.Открыть();		
	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время открытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	Попытка
		Лог.Отладка("Меняю модель восстановления базы %1", мНастройки.СУБД_ИмяВременнойБазы);

		Запрос = Новый Запрос();
		Запрос.УстановитьСоединение(Соединение);
		Запрос.Текст = "ALTER DATABASE [" + мНастройки.СУБД_ИмяВременнойБазы + "] SET RECOVERY SIMPLE";
		Запрос.Таймаут = 300; 
		Запрос.ВыполнитьКоманду();
	Исключение
		Лог.Ошибка("Во время смены модели базы SQL возникла ошибка : %1", ОписаниеОшибки());
		Успех = Ложь;
	КонецПопытки;
	

	Попытка
		Соединение.Закрыть();
	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время закрытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура ОбрезатьЛогиSQL(Успех)
	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Обрезаю логи базы SQL");

	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = мНастройки.СУБД_Сервер;
	Соединение.ИмяБазы = "master";
	Соединение.ИмяПользователя = мНастройки.СУБД_Пользователь;
	Соединение.Пароль = мНастройки.СУБД_Пароль;
	
	Попытка
		Соединение.Открыть();		
	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время открытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	Попытка
			
		Лог.Отладка("Обрезаю логи базы %1", мНастройки.СУБД_ИмяВременнойБазы);

		Запрос = Новый Запрос();
		Запрос.УстановитьСоединение(Соединение);
		Запрос.Текст = "USE [" 
						+ мНастройки.СУБД_ИмяВременнойБазы 
						+ "]; DBCC SHRINKFILE ([" 
						+ мНастройки.СУБД_ИмяВременнойБазы 
						+ "_Log], 150)";
		Запрос.Таймаут = 600; 
		Запрос.ВыполнитьКоманду();
	Исключение
		Лог.Ошибка("Во время сжатия логов базы SQL возникла ошибка : %1", ОписаниеОшибки());
		Успех = Ложь;
	КонецПопытки;
	

	Попытка
		Соединение.Закрыть();
	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время закрытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура УдалитьБазуДанныхSQL(Успех)
	
	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Удаляю базу SQL");

	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = мНастройки.СУБД_Сервер;
	Соединение.ИмяБазы = "master";
	Соединение.ИмяПользователя = мНастройки.СУБД_Пользователь;
	Соединение.Пароль = мНастройки.СУБД_Пароль;
	
	Попытка
		Соединение.Открыть();		
	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время открытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	Попытка
		Запрос = Новый Запрос();
		Запрос.УстановитьСоединение(Соединение);
		Запрос.Текст = "drop database [" + мНастройки.СУБД_ИмяВременнойБазы + "]";
		Запрос.Таймаут = 300; 
		Запрос.ВыполнитьКоманду();	
	Исключение
		Лог.Ошибка("Во время удаления базы SQL возникла ошибка : %1", ОписаниеОшибки());
		Успех = Ложь;
	КонецПопытки;
	

	Попытка
		Соединение.Закрыть();
	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время закрытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Процедура ВыполнитьОбрезкуТаблицSQL(Успех)
	
	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьПолнуюОчисткуТаблиц(Успех);

	ВыполнитьЧастичнуюОчисткуТаблиц(Успех);

	ВыполнитьЗависимуюОчисткуТаблиц(Успех);

КонецПроцедуры


Процедура ВыполнитьЗависимуюОчисткуТаблиц(Успех)
	
	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Начинаю обрезку таблиц SQL: Зависимая очистка");
	
	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = мНастройки.СУБД_Сервер;
	Соединение.ИмяБазы = "master";
	Соединение.ИмяПользователя = мНастройки.СУБД_Пользователь;
	Соединение.Пароль = мНастройки.СУБД_Пароль;
	
	Попытка
		Соединение.Открыть();	
	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время открытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
		Возврат;	
	КонецПопытки;
	
	МассивТаблиц = мНастройки.Таблицы_ЗависимаяОчистка;

	Попытка

		Для каждого Эл Из МассивТаблиц Цикл

			Лог.Отладка("Обрабатываю таблицу %1 базы %2", Эл.ИмяТаблицы, мНастройки.СУБД_ИмяВременнойБазы);			
			
			СписокКолонокТаблицы = ПолучитьСписокКолонокТаблицы(Эл.ИмяТаблицы);
			
			Если НЕ ЗначениеЗаполнено(СписокКолонокТаблицы) Тогда
				ВызватьИсключение("Не удалось получить список колонок для таблицы " + Эл.ИмяТаблицы);
			КонецЕсли;

			ТипТаблицы = ВернутьТипТаблицыПоИмени(Эл.ИмяТаблицы);

			Запрос = Новый Запрос();
			Запрос.УстановитьСоединение(Соединение);
			Запрос.Таймаут = 120;

			// Поместим нужные записи во временную таблицу
			Запрос.Текст = "select " + 
				СписокКолонокТаблицы + 
				" into ##tmp_" + 
				Эл.ИмяТаблицы + 
				" from [" + 
				мНастройки.СУБД_ИмяВременнойБазы + 
				"].[dbo].[" + 
				Эл.ИмяТаблицы + 
				"] INNER JOIN [" + 
				мНастройки.СУБД_ИмяВременнойБазы +
				"].[dbo].[" +
				Эл.РодительскаяТаблица +
				"] AS ParentDocument ON [" + 
				Эл.ПолеСвязи + 
				"] = ParentDocument._IDRRef";				
			Лог.Отладка("Выполняю команду %1", Запрос.Текст);
			Запрос.ВыполнитьКоманду();

			// Очистим исходную таблицу
			Запрос.Текст = "truncate TABLE [" + 
				мНастройки.СУБД_ИмяВременнойБазы + 
				"].[dbo].[" + 
				Эл.ИмяТаблицы + 
				"]";
			Лог.Отладка("Выполняю команду %1", Запрос.Текст);
			Запрос.ВыполнитьКоманду();
			
			// Обработаем колонку _Version
			Если ТипТаблицы = "Документ"
				ИЛИ ТипТаблицы = "Справочник" Тогда
				УдалитьДобавитьКолонкуВерсийТаблицы(Запрос, Эл.ИмяТаблицы, "Обработка_ДО");
			КонецЕсли;

			// Поместим записи из временной таблицы в исходную
			Запрос.Текст = "insert into [" + 
				мНастройки.СУБД_ИмяВременнойБазы + 
				"].[dbo].[" + 
				Эл.ИмяТаблицы + 
				"] select * from ##tmp_" + 
				Эл.ИмяТаблицы;
			Лог.Отладка("Выполняю команду %1", Запрос.Текст);
			Запрос.ВыполнитьКоманду();

			// Обработаем колонку _Version
			Если ТипТаблицы = "Документ"
				ИЛИ ТипТаблицы = "Справочник" Тогда
				УдалитьДобавитьКолонкуВерсийТаблицы(Запрос, Эл.ИмяТаблицы, "Обработка_ПОСЛЕ");
			КонецЕсли;

			// Удалим временную таблицу
			Запрос.Текст = "drop table ##tmp_" + 
				Эл.ИмяТаблицы;
			Лог.Отладка("Выполняю команду %1", Запрос.Текст);
			Запрос.ВыполнитьКоманду();

		КонецЦикла;

	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время очистки таблиц SQL возникла ошибка : %1", ОписаниеОшибки());
	КонецПопытки;	

	Попытка
		Соединение.Закрыть();
	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время закрытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
		Возврат;
	КонецПопытки;

КонецПроцедуры

Функция ПолучитьСписокКолонокТаблицы(ИмяТаблицы)

	Лог.Отладка("Начинаю получение списка колонок таблицы %1", ИмяТаблицы);

	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = мНастройки.СУБД_Сервер;
	Соединение.ИмяБазы = "master";
	Соединение.ИмяПользователя = мНастройки.СУБД_Пользователь;
	Соединение.Пароль = мНастройки.СУБД_Пароль;
	
	Попытка
		Соединение.Открыть();	
	Исключение
		Лог.Ошибка("Во время открытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
		Возврат Неопределено;	
	КонецПопытки;

	Запрос = Новый Запрос();
	Запрос.УстановитьСоединение(Соединение);
	Запрос.Текст = "select top 1 * from [" +  
				мНастройки.СУБД_ИмяВременнойБазы + 
				"].[dbo].[" + 
				ИмяТаблицы + 
				"]";
	Попытка
		ТабРезультата = Запрос.Выполнить().Выгрузить();
	Исключение
		Лог.Ошибка("Во время выполнения запроса SQL возникла ошибка : %1", ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	СтрокаВозврата = "";
	Инд = 0;
	Для каждого Колонка Из ТабРезультата.Колонки Цикл
		Инд = Инд + 1;
		СтрокаВозврата = СтрокаВозврата + 
			"[" +
			ИмяТаблицы +
			"].[" +
			Колонка.Имя +
			"]";
		Если НЕ Инд = ТабРезультата.Колонки.Количество() Тогда
			СтрокаВозврата = СтрокаВозврата + ",";	
		КонецЕсли;
	КонецЦикла;

	Попытка
		Соединение.Закрыть();
	Исключение
		Лог.Ошибка("Во время закрытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	Возврат СтрокаВозврата;

КонецФункции

Процедура ВыполнитьПолнуюОчисткуТаблиц(Успех)

	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Начинаю обрезку таблиц SQL: Полная очистка");

	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = мНастройки.СУБД_Сервер;
	Соединение.ИмяБазы = "master";
	Соединение.ИмяПользователя = мНастройки.СУБД_Пользователь;
	Соединение.Пароль = мНастройки.СУБД_Пароль;
	
	Попытка
		Соединение.Открыть();	
	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время открытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
		Возврат;	
	КонецПопытки;
	
	МассивТаблиц = мНастройки.Таблицы_ПолнаяОчистка;

	Попытка

		Для каждого Эл Из МассивТаблиц Цикл

			Лог.Отладка("Обрабатываю таблицу %1 базы %2", Эл, мНастройки.СУБД_ИмяВременнойБазы);			
			
			Запрос = Новый Запрос();
			Запрос.УстановитьСоединение(Соединение);
			Запрос.Текст = "truncate TABLE [" + мНастройки.СУБД_ИмяВременнойБазы + "].[dbo].[" + Эл + "]";

			Лог.Отладка("Выполняю команду %1", Запрос.Текст);

			Запрос.Таймаут = 120;
			Запрос.ВыполнитьКоманду();			

		КонецЦикла;

	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время очистки таблиц SQL возникла ошибка : %1", ОписаниеОшибки());
	КонецПопытки;	

	Попытка
		Соединение.Закрыть();
	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время закрытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	
КонецПроцедуры

Процедура ВыполнитьЧастичнуюОчисткуТаблиц(Успех)
	
	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Начинаю обрезку таблиц SQL: Частичная очистка");

	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = мНастройки.СУБД_Сервер;
	Соединение.ИмяБазы = "master";
	Соединение.ИмяПользователя = мНастройки.СУБД_Пользователь;
	Соединение.Пароль = мНастройки.СУБД_Пароль;
	
	Попытка
		Соединение.Открыть();	
	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время открытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
		Возврат;	
	КонецПопытки;
	
	МассивТаблиц = мНастройки.Таблицы_ЧастичнаяОчистка;

	Попытка

		Для каждого Эл Из МассивТаблиц Цикл

			ТипТаблицы = ВернутьТипТаблицыПоИмени(Эл.ИмяТаблицы);

			Запрос = Новый Запрос();
			Запрос.УстановитьСоединение(Соединение);
			Запрос.Таймаут = 120;

			// Поместим нужное количество записей во временную таблицу
			Запрос.Текст = "select top " + 
				Эл.ОстатокЗаписей + 
				" * into ##tmp_" + 
				Эл.ИмяТаблицы + 
				" from [" + 
				мНастройки.СУБД_ИмяВременнойБазы + 
				"].[dbo].[" + 
				Эл.ИмяТаблицы + 
				"]";
			
			Если ТипТаблицы = "Документ" Тогда
				Запрос.Текст = Запрос.Текст +
					" order by [_Date_Time] desc";
			КонецЕсли;

			Лог.Отладка("Выполняю команду %1", Запрос.Текст);
			Запрос.ВыполнитьКоманду();
			
			// Очистим исходную таблицу
			Запрос.Текст = "truncate TABLE [" + 
				мНастройки.СУБД_ИмяВременнойБазы + 
				"].[dbo].[" + 
				Эл.ИмяТаблицы + 
				"]";
			Лог.Отладка("Выполняю команду %1", Запрос.Текст);
			Запрос.ВыполнитьКоманду();

			// Обработаем колонку _Version
			Если ТипТаблицы = "Документ"
				ИЛИ ТипТаблицы = "Справочник" Тогда
				УдалитьДобавитьКолонкуВерсийТаблицы(Запрос, Эл.ИмяТаблицы, "Обработка_ДО");
			КонецЕсли;

			// Поместим записи из временной таблицы в исходную
			Запрос.Текст = "insert into [" + 
				мНастройки.СУБД_ИмяВременнойБазы + 
				"].[dbo].[" + 
				Эл.ИмяТаблицы + 
				"] select * from ##tmp_" + 
				Эл.ИмяТаблицы;
			Лог.Отладка("Выполняю команду %1", Запрос.Текст);
			Запрос.ВыполнитьКоманду();

			// Обработаем колонку _Version
			Если ТипТаблицы = "Документ"
				ИЛИ ТипТаблицы = "Справочник" Тогда
				УдалитьДобавитьКолонкуВерсийТаблицы(Запрос, Эл.ИмяТаблицы, "Обработка_ПОСЛЕ");
			КонецЕсли;

			// Удалим временную таблицу
			Запрос.Текст = "drop table ##tmp_" + 
				Эл.ИмяТаблицы;
			Лог.Отладка("Выполняю команду %1", Запрос.Текст);
			Запрос.ВыполнитьКоманду();			

		КонецЦикла;

	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время очистки таблиц SQL возникла ошибка : %1", ОписаниеОшибки());
	КонецПопытки;	

	Попытка
		Соединение.Закрыть();
	Исключение
		Успех = Ложь;
		Лог.Ошибка("Во время закрытия соединения с SQL возникла ошибка : %1", ОписаниеОшибки());
		Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура УдалитьДобавитьКолонкуВерсийТаблицы(Запрос, ИмяТаблицы, ВариантОбработки)

	Если ВариантОбработки = "Обработка_ДО" Тогда

		// Удалим колонку _Version из исходной таблицы
		Запрос.Текст = "ALTER TABLE [" + 
			мНастройки.СУБД_ИмяВременнойБазы + 
			"].[dbo].[" + 
			ИмяТаблицы + 
			"] DROP COLUMN [_Version]";
		Лог.Отладка("Выполняю команду %1", Запрос.Текст);
		Запрос.ВыполнитьКоманду();

		// Добавим колонку _Version в исходуню таблицу с примитивным типом datetime
		Запрос.Текст = "ALTER TABLE [" + 
			мНастройки.СУБД_ИмяВременнойБазы + 
			"].[dbo].[" + 
			ИмяТаблицы + 
			"] ADD _Version datetime";
		Лог.Отладка("Выполняю команду %1", Запрос.Текст);
		Запрос.ВыполнитьКоманду();

		// Удалим колонку _Version из временной таблицы
		Запрос.Текст = "ALTER TABLE ##tmp_" + 
			ИмяТаблицы + 
			" DROP COLUMN [_Version]";
		Лог.Отладка("Выполняю команду %1", Запрос.Текст);
		Запрос.ВыполнитьКоманду();

		// Добавим колонку _Version во временную таблицу с примитивным типом datetime
		Запрос.Текст = "ALTER TABLE ##tmp_" + 
			ИмяТаблицы + 
			" ADD _Version datetime";
		Лог.Отладка("Выполняю команду %1", Запрос.Текст);
		Запрос.ВыполнитьКоманду();

	ИначеЕсли ВариантОбработки = "Обработка_ПОСЛЕ" Тогда
		
		// Удалим колонку _Version из исходной таблицы
		Запрос.Текст = "ALTER TABLE [" + 
			мНастройки.СУБД_ИмяВременнойБазы + 
			"].[dbo].[" + 
			ИмяТаблицы + 
			"] DROP COLUMN [_Version]";
		Лог.Отладка("Выполняю команду %1", Запрос.Текст);
		Запрос.ВыполнитьКоманду();

		// Добавим колонку _Version во временную таблицу с нужным типом timestamp NOT NULL
		Запрос.Текст = "ALTER TABLE [" + 
			мНастройки.СУБД_ИмяВременнойБазы + 
			"].[dbo].[" + 
			ИмяТаблицы + 
			"] ADD _Version timestamp NOT NULL";
		Лог.Отладка("Выполняю команду %1", Запрос.Текст);
		Запрос.ВыполнитьКоманду();

	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьSQlБекап(Успех)
	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Создаю бекап sql базы");

	// cpdb backup 
	// -sql-srvr MySQLName 
	// -sql-db MyDatabase 
	// -sql-user sa 
	// -sql-pwd 12345 
	// -bak-path "d:\MSSQL\Backup\MyDatabase_copy.bak"
	
	СтрокаЗапуска = "cpdb backup -sql-srvr " + ОбернутьВКавычки(мНастройки.СУБД_Сервер)
					+ " -sql-db " + мНастройки.СУБД_ИмяВременнойБазы
					+ " -sql-user " + мНастройки.СУБД_Пользователь
					+ " -sql-pwd " + мНастройки.СУБД_Пароль
					+ " -bak-path " + ОбернутьВКавычки(мНастройки.СУБД_ПутьОбрезанногоБекапа);

	ВыполнитьКоманду(СтрокаЗапуска, Успех);

КонецПроцедуры

Процедура ЗагрузитьБекап1С(Успех)
	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Лог.Информация("Загружаю бекап базы 1с");

	// cpdb restoreib 
	// -ib-path "/FD:/data/MyDatabase" 
	// -dt-path "d:\data\1Cv8.dt" 
	// -ib-user Администратор 
	// -ib-pwd 123456 
	// -v8version 8.3.8 
	// -uccode 1234 
	// -delsrc
	

	СтрокаЗапуска = "cpdb restoreib -ib-path /S" + мНастройки.Приложение_Сервер 
					+ "\" + мНастройки.Приложение_ИмяВременнойБазы
					+ " -dt-path " + мНастройки.Приложение_ПутьДляБекапа
					+ " -v8version " + мНастройки.Приложение_Версия
					+ " -delsrc";

	ВыполнитьКоманду(СтрокаЗапуска, Успех);
	
КонецПроцедуры

Процедура СоздатьБекап1С(Успех)
	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Лог.Информация("Создаю бекап базы 1с");

	// cpdb dumpib 
	// -ib-path "/FD:/data/MyDatabase" 
	// -dt-path "d:\data\1Cv8.dt" 
	// -ib-user Администратор 
	// -ib-pwd 123456 
	// -v8version 8.3.8 
	// -uccode 1234	

	СтрокаЗапуска = "cpdb dumpib -ib-path /S" + мНастройки.Приложение_Сервер 
					+ "\" + мНастройки.Приложение_ИмяВременнойБазы
					+ " -dt-path " + мНастройки.Приложение_ПутьДляБекапа
					+ " -ib-user " + мНастройки.Приложение_Пользователь
					+ " -ib-pwd " + мНастройки.Приложение_Пароль
					+ " -v8version " + мНастройки.Приложение_Версия;

	ВыполнитьКоманду(СтрокаЗапуска, Успех);
	
КонецПроцедуры

Процедура СоздатьБазу1С(Успех)
	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Создаю базу 1с");

	// cpdb createib 
	// -ib-srvr My1CServer 
	// -ib-ref TST_DB_MyDomain 
	// -db-srvr MySQLServer 
	// -db-user _1CSrvUsr1 
	// -db-pwd p@ssw0rd 
	// -db-name TST_DB_MyDomain 
	// -createdb 
	// -nameinlist "My test base" 
	// -errifexist
	
	СтрокаЗапуска = "cpdb createib -ib-srvr " + мНастройки.Приложение_Сервер
					+ " -ib-ref " + мНастройки.Приложение_ИмяВременнойБазы
					+ " -db-srvr " + мНастройки.СУБД_Сервер
					+ " -db-user " + мНастройки.СУБД_Пользователь
					+ " -db-pwd " + мНастройки.СУБД_Пароль
					+ " -createdb "
					+ " -v8version " + мНастройки.Приложение_Версия;

	ВыполнитьКоманду(СтрокаЗапуска, Успех);

КонецПроцедуры

Процедура ВостановитьSQlИзБекапа(Успех, ПутьБекапа)
	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Востанавливаю sql базу из бекапа");


	// cpdb restore 
	// -sql-srvr MyNewSQLServer 
	// -sql-db MyDatabase_copy 
	// -sql-user SQLUser 
	// -sql-pwd 123456 
	// -bak-path "d:\data\MyBackUpfile.bak" 
	// -create-db 
	// -shrink-db 
	// -db-owner SQLdbo 
	// -db-path "d:\MSSQL\data" 
	// -db-logpath "e:\MSSQL\logs" 
	// -db-recovery SIMPLE 
	// -delsrc

	СтрокаЗапуска = "cpdb restore -sql-srvr " + ОбернутьВКавычки(мНастройки.СУБД_Сервер)
					+ " -sql-db " + мНастройки.СУБД_ИмяВременнойБазы
					+ " -sql-user " + мНастройки.СУБД_Пользователь
					+ " -sql-pwd " + мНастройки.СУБД_Пароль
					+ " -bak-path " + ОбернутьВКавычки(ПутьБекапа)
					+ " -create-db"
					+ " -db-path " + ОбернутьВКавычки(мНастройки.СУБД_МестоХраненияДанных)
					+ " -db-logpath " + ОбернутьВКавычки(мНастройки.СУБД_МестоХраненияЛогов)
					+ " -db-changelfn"
					+ " -db-recovery SIMPLE";
	
	ВыполнитьКоманду(СтрокаЗапуска, Успех);

КонецПроцедуры

Процедура ВыполнитьКоманду(СтрокаЗапуска, Успех)
	
	Команда = Новый Команда;	
	Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);

	Лог.Отладка("Исполняю команду %1", СтрокаЗапуска);

	КодВозврата = Команда.Исполнить();

	Если НЕ КодВозврата = 0 Тогда
		Успех = Ложь;
		Лог.Ошибка(Команда.ПолучитьВывод());
	КонецЕсли;

КонецПроцедуры

Функция ОбернутьВКавычки(Знач Строка);
	Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

Функция ВернутьТипТаблицыПоИмени(ИмяТаблицы)

	ПеремИмяТаблицы = НРег(ИмяТаблицы);	

	Если СтрНайти(ПеремИмяТаблицы, "document") > 0 Тогда
		Если СтрНайти(ПеремИмяТаблицы, "vt") > 0 Тогда
			ЗначениеВозврата = "Документ_ТабличнаяЧасть";	
		Иначе	
			ЗначениеВозврата = "Документ";
		КонецЕсли;
	ИначеЕсли СтрНайти(ПеремИмяТаблицы, "reference") > 0 Тогда
		Если СтрНайти(ПеремИмяТаблицы, "vt") > 0 Тогда
			ЗначениеВозврата = "Справочник_ТабличнаяЧасть";	
		Иначе	
			ЗначениеВозврата = "Справочник";
		КонецЕсли;
	ИначеЕсли СтрНайти(ПеремИмяТаблицы, "inforg") > 0 Тогда
		ЗначениеВозврата = "РегистрСведений";
	Иначе
		ЗначениеВозврата = "Неизвестно";
	КонецЕсли;
	
	Возврат ЗначениеВозврата;

КонецФункции

Процедура ЗаполнитьНастройкиПриложения(Знач Менеджер)
	
	Если Менеджер = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Лог.Отладка("Начинаю заполнение внутреннего хранилища параметров");

	ПеремНастройки = Новый Структура;	
	НастройкиПолны = Истина;

	// Сервер СУБД
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"СУБД_Сервер", 
									"Настройки.ПараметрыСУБД.Сервер",
									НастройкиПолны);
	// Пользователь СУБД
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"СУБД_Пользователь", 
									"Настройки.ПараметрыСУБД.Пользователь",
									НастройкиПолны);
	// Пароль СУБД
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"СУБД_Пароль", 
									"Настройки.ПараметрыСУБД.Пароль",
									НастройкиПолны);
	// ИмяВременнойБазы СУБД
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"СУБД_ИмяВременнойБазы", 
									"Настройки.ПараметрыСУБД.ИмяВременнойБазы",
									НастройкиПолны);
	// ПутьОбрезанногоБекапа СУБД
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"СУБД_ПутьОбрезанногоБекапа", 
									"Настройки.ПараметрыСУБД.ПутьОбрезанногоБекапа",
									НастройкиПолны);
	// ПутьОбрезанногоБекапа СУБД
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"СУБД_ПутьПолногоБекапа", 
									"Настройки.ПараметрыСУБД.ПутьПолногоБекапа",
									НастройкиПолны);
	// МестоХраненияДанных СУБД
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"СУБД_МестоХраненияДанных", 
									"Настройки.ПараметрыСУБД.МестоХраненияДанных",
									НастройкиПолны);
	// МестоХраненияЛогов СУБД
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"СУБД_МестоХраненияЛогов", 
									"Настройки.ПараметрыСУБД.МестоХраненияЛогов",
									НастройкиПолны);
	// ПутьПустогоБекапа СУБД
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"СУБД_ПутьПустогоБекапа", 
									"Настройки.ПараметрыСУБД.ПутьПустогоБекапа",
									НастройкиПолны);
	// Сервер ПРИЛОЖЕНИЕ 
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"Приложение_Сервер", 
									"Настройки.Параметры1С.Сервер",
									НастройкиПолны);
	// Пользователь ПРИЛОЖЕНИЕ
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"Приложение_Пользователь", 
									"Настройки.Параметры1С.Пользователь",
									НастройкиПолны);
	// Пароль ПРИЛОЖЕНИЕ
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"Приложение_Пароль", 
									"Настройки.Параметры1С.Пароль",
									НастройкиПолны);					

	// ИмяВременнойБазы ПРИЛОЖЕНИЕ
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"Приложение_ИмяВременнойБазы", 
									"Настройки.Параметры1С.ИмяВременнойБазы",
									НастройкиПолны);
	// ПутьДляБекапа ПРИЛОЖЕНИЕ
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"Приложение_ПутьДляБекапа", 
									"Настройки.Параметры1С.ПутьДляБекапа",
									НастройкиПолны);
	// Версия ПРИЛОЖЕНИЕ
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"Приложение_Версия", 
									"Настройки.Параметры1С.Версия",
									НастройкиПолны);
	
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"Таблицы_ПолнаяОчистка", 
									"Настройки.ТаблицыОбрезки.ПолнаяОчистка",
									НастройкиПолны);
	
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"Таблицы_ЧастичнаяОчистка", 
									"Настройки.ТаблицыОбрезки.ЧастичнаяОчистка",
									НастройкиПолны);

	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"Таблицы_ЗависимаяОчистка", 
									"Настройки.ТаблицыОбрезки.ЗависимаяОчистка",
									НастройкиПолны);
	
	Если НастройкиПолны Тогда
		мНастройки = ПеремНастройки;
	КонецЕсли;

	Лог.Отладка("Заполнение внутреннего хранилища параметров закончено");

КонецПроцедуры

Процедура ПоместитьНастройкуВОбщееХранилище(Знач Менеджер, ПеремНастройки, ИмяНастройки, ИмяВФайле, ЗначениеУказано)

	ПеремПараметр = Менеджер.Параметр(ИмяВФайле);

	Если ТипЗнч(ПеремПараметр) = Тип("Массив") Тогда

		ПеремМассив = Новый Массив;

		Для каждого Эл Из ПеремПараметр Цикл

			Если ТипЗнч(Эл) = Тип("Соответствие") Тогда
				ПеремМассив.Добавить(ПолучитьСтруктуруИзСоответствия(Эл));
			Иначе
				ПеремМассив.Добавить(Эл);	
			КонецЕсли;

		КонецЦикла;	

		ПеремНастройки.Вставить(ИмяНастройки, ПеремМассив);

	ИначеЕсли ТипЗнч(ПеремПараметр) = Тип("Соответствие") Тогда
		
		ПеремНастройки.Вставить(ИмяНастройки, ПолучитьСтруктуруИзСоответствия(ПеремПараметр));

	Иначе

		ПеремНастройки.Вставить(ИмяНастройки, ПеремПараметр);

		Если НЕ ЗначениеЗаполнено(ПеремПараметр) Тогда
			Лог.Ошибка("Не удалось прочитать параметр %1 (в файле %2)", ИмяНастройки, ИмяВФайле);
			ЗначениеУказано = Ложь;
		Иначе
			Лог.Отладка("Прочитал параметр %1 (в файле %2) как %3", ИмяНастройки, ИмяВФайле, ПеремПараметр);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСтруктуруИзСоответствия(Знач Соответствие)
	
	ПеремСтруктура = Новый Структура;

	Для каждого КлючЗначение Из Соответствие Цикл
		ПеремСтруктура.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	Возврат ПеремСтруктура;
КонецФункции

Функция ИнициироватьЧтениеНастроек(Знач ПутьКНастройкам)

	Лог.Отладка("Начинаю чтение настроек из файла %1", ПутьКНастройкам);

	МенеджерПараметров = Новый МенеджерПараметров();
	МенеджерПараметров.УстановитьФайлПараметров(ПутьКНастройкам);
	МенеджерПараметров.ИспользоватьПровайдерJSON(0);

	Попытка
		МенеджерПараметров.Прочитать();
	Исключение
		Лог.Ошибка("Не удалось прочитать настройки из файла %1 по причине: %2", ПутьКНастройкам, ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Если НЕ МенеджерПараметров.ЧтениеВыполнено() Тогда
		Лог.Ошибка("Не удалось прочитать настройки из файла %1 по причине: Нарушение формата файла", ПутьКНастройкам);
		Возврат Неопределено;	
	КонецЕсли;

	Лог.Отладка("Прочитал настройки из файла %1", ПутьКНастройкам);
	Возврат МенеджерПараметров;
	
КонецФункции

Функция ПроверитьНаличиеФайла(Знач ИмяФайла)

	Лог.Отладка("Проверяем наличие файла: %1", ИмяФайла);
	Возврат ФС.ФайлСуществует(ИмяФайла);

КонецФункции

Процедура УстановитьРежимОтладкиПриНеобходимости(Знач РежимОтладки) Экспорт
	
	Если РежимОтладки Тогда		
		Лог().УстановитьУровень(УровниЛога.Отладка);
	КонецЕсли;
	
КонецПроцедуры 

Функция Лог()
	Возврат Логирование.ПолучитьЛог(ИмяЛога());
КонецФункции

Функция ИмяЛога()
	Возврат "oscript.app.kis_shrink";	
КонецФункции

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт
	Возврат СтрШаблон("[%1]-[%2]:[%3]-%4", 
			ИмяЛога(),	
			ТекущаяДата(),  
			УровниЛога.НаименованиеУровня(Уровень), 
			Сообщение);
КонецФункции

Лог = Лог();
Лог.УстановитьРаскладку(ЭтотОбъект);

мНастройки = Неопределено;

Инициализация();

